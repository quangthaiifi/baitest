/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 10:13:03 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.example.demo.entity.MembersRequest;
import com.example.demo.repository.MembersRequestRepository;
import com.example.demo.service.criteria.MembersRequestCriteria;

/**
 * Service implementation for MembersRequest.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class MembersRequestServiceImpl implements MembersRequestService {

	@Autowired
	private MembersRequestRepository membersRequestRepository;

	@Override
	public Page<MembersRequest> search(Pageable pageable, MembersRequestCriteria criteria) {
		return membersRequestRepository.findAll(new MembersRequestSpecification(criteria), pageable);
	}

	@Override
	public MembersRequest get(Long requestId) {
		return membersRequestRepository.findByRequestId(requestId);
	}

	@Override
	public Boolean delete(Long requestId) {
		if (membersRequestRepository.findByRequestId(requestId) != null) {
			membersRequestRepository.deleteById(requestId);
			return true;
		}
		return false;
	}

	@Override
	public MembersRequest create(MembersRequest membersRequest) {
		return membersRequestRepository.save(membersRequest);
	}

	@Override
	public Boolean save(MembersRequest membersRequest) {
		final Long pk = membersRequest.getRequestId();
		if (membersRequestRepository.findByRequestId(pk) != null) {
			membersRequestRepository.save(membersRequest);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(MembersRequest membersRequest) {
		return membersRequestRepository.existsById(membersRequest.getRequestId());
	}

	class MembersRequestSpecification implements Specification<MembersRequest> {

		private MembersRequestCriteria criteria;

		public MembersRequestSpecification(MembersRequestCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<MembersRequest> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getDataRequested())) {
				predicates.add(builder.like(builder.lower(root.get("dataRequested")),
						criteria.getDataRequested().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getDateLocated())) {
				predicates.add(builder.like(builder.lower(root.get("dateLocated")),
						criteria.getDateLocated().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getOtherrequestDetails())) {
				predicates.add(builder.like(builder.lower(root.get("otherrequestDetails")),
						criteria.getOtherrequestDetails().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

}

/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 10:13:02 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Members;
import com.example.demo.repository.MembersRepository;
import com.example.demo.service.criteria.MembersCriteria;

/**
 * Service implementation for Members.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class MembersServiceImpl implements MembersService {

	@Autowired
	private MembersRepository membersRepository;

	@Override
	public Page<Members> search(Pageable pageable, MembersCriteria criteria) {
		return membersRepository.findAll(new MembersSpecification(criteria), pageable);
	}

	@Override
	public Members get(Long memberId) {
		return membersRepository.findByMemberId(memberId);
	}

	@Override
	public Boolean delete(Long memberId) {
		if (membersRepository.findByMemberId(memberId) != null) {
			membersRepository.deleteById(memberId);
			return true;
		}
		return false;
	}

	@Override
	public Members create(Members members) {
		return membersRepository.save(members);
	}

	@Override
	public Boolean save(Members members) {
		final Long pk = members.getMemberId();
		if (membersRepository.findByMemberId(pk) != null) {
			membersRepository.save(members);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(Members members) {
		return membersRepository.existsById(members.getMemberId());
	}

	class MembersSpecification implements Specification<Members> {

		private MembersCriteria criteria;

		public MembersSpecification(MembersCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<Members> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getGender())) {
				predicates.add(builder.like(builder.lower(root.get("gender")),
						criteria.getGender().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getMemberFirstName())) {
				predicates.add(builder.like(builder.lower(root.get("memberFirstName")),
						criteria.getMemberFirstName().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getMemberLastName())) {
				predicates.add(builder.like(builder.lower(root.get("memberLastName")),
						criteria.getMemberLastName().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getPhoneNumber())) {
				predicates.add(builder.like(builder.lower(root.get("phoneNumber")),
						criteria.getPhoneNumber().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getEmailAddress())) {
				predicates.add(builder.like(builder.lower(root.get("emailAddress")),
						criteria.getEmailAddress().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getOtherMemberDetails())) {
				predicates.add(builder.like(builder.lower(root.get("otherMemberDetails")),
						criteria.getOtherMemberDetails().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

}

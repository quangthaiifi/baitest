/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 10:13:02 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.example.demo.entity.AnazoneBook;
import com.example.demo.repository.AnazoneBookRepository;
import com.example.demo.service.criteria.AnazoneBookCriteria;

/**
 * Service implementation for AnazoneBook.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class AnazoneBookServiceImpl implements AnazoneBookService {

	@Autowired
	private AnazoneBookRepository anazoneBookRepository;

	@Override
	public Page<AnazoneBook> search(Pageable pageable, AnazoneBookCriteria criteria) {
		return anazoneBookRepository.findAll(new AnazoneBookSpecification(criteria), pageable);
	}

	@Override
	public AnazoneBook get(Long isbn) {
		return anazoneBookRepository.findByIsbn(isbn);
	}

	@Override
	public Boolean delete(Long isbn) {
		if (anazoneBookRepository.findByIsbn(isbn) != null) {
			anazoneBookRepository.deleteById(isbn);
			return true;
		}
		return false;
	}

	@Override
	public AnazoneBook create(AnazoneBook anazoneBook) {
		return anazoneBookRepository.save(anazoneBook);
	}

	@Override
	public Boolean save(AnazoneBook anazoneBook) {
		final Long pk = anazoneBook.getIsbn();
		if (anazoneBookRepository.findByIsbn(pk) != null) {
			anazoneBookRepository.save(anazoneBook);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(AnazoneBook anazoneBook) {
		return anazoneBookRepository.existsById(anazoneBook.getIsbn());
	}

	class AnazoneBookSpecification implements Specification<AnazoneBook> {

		private AnazoneBookCriteria criteria;

		public AnazoneBookSpecification(AnazoneBookCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<AnazoneBook> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getTitle())) {
				predicates.add(builder.like(builder.lower(root.get("title")),
						criteria.getTitle().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getDataOfPublication())) {
				predicates.add(builder.like(builder.lower(root.get("dataOfPublication")),
						criteria.getDataOfPublication().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getAmazoneStarRating())) {
				predicates.add(builder.like(builder.lower(root.get("amazoneStarRating")),
						criteria.getAmazoneStarRating().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getListPrice())) {
				predicates.add(builder.like(builder.lower(root.get("listPrice")),
						criteria.getListPrice().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getAmazoePrice())) {
				predicates.add(builder.like(builder.lower(root.get("amazoePrice")),
						criteria.getAmazoePrice().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getYourSaving())) {
				predicates.add(builder.like(builder.lower(root.get("yourSaving")),
						criteria.getYourSaving().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

}

/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 10:13:02 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.example.demo.entity.BooksByAuthor;
import com.example.demo.entity.BooksByAuthorKey;
import com.example.demo.repository.BooksByAuthorRepository;

/**
 * Service implementation for BooksByAuthor.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class BooksByAuthorServiceImpl implements BooksByAuthorService {

	@Autowired
	private BooksByAuthorRepository booksByAuthorRepository;

	@Override
	public Page<BooksByAuthor> search(Pageable pageable) {
		return booksByAuthorRepository.findAll(pageable);
	}

	@Override
	public BooksByAuthor get(Long authorsAuthorId, Long booksIsbn) {
		// Build the composite key
		BooksByAuthorKey key = new BooksByAuthorKey(authorsAuthorId, booksIsbn);
		return booksByAuthorRepository.findByCompositePrimaryKey(key);
	}

	@Override
	public Boolean delete(Long authorsAuthorId, Long booksIsbn) {
		// Build the composite key
		BooksByAuthorKey key = new BooksByAuthorKey(authorsAuthorId, booksIsbn);
		if (booksByAuthorRepository.findByCompositePrimaryKey(key) != null) {
			booksByAuthorRepository.deleteById(key);
			return true;
		}
		return false;
	}

	@Override
	public BooksByAuthor create(BooksByAuthor booksByAuthor) {
		return booksByAuthorRepository.save(booksByAuthor);
	}

	@Override
	public Boolean save(BooksByAuthor booksByAuthor) {
		// Build the composite key
		BooksByAuthorKey pk = new BooksByAuthorKey(booksByAuthor.getAuthorsAuthorId(), booksByAuthor.getBooksIsbn());
		if (booksByAuthorRepository.findByCompositePrimaryKey(pk) != null) {
			booksByAuthorRepository.save(booksByAuthor);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(BooksByAuthor booksByAuthor) {
		// Build the composite key
		BooksByAuthorKey pk = new BooksByAuthorKey(booksByAuthor.getAuthorsAuthorId(), booksByAuthor.getBooksIsbn());
		return booksByAuthorRepository.existsById(pk);
	}


}

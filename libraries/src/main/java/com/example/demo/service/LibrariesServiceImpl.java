/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 10:13:02 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Libraries;
import com.example.demo.repository.LibrariesRepository;
import com.example.demo.service.criteria.LibrariesCriteria;

/**
 * Service implementation for Libraries.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class LibrariesServiceImpl implements LibrariesService {

	@Autowired
	private LibrariesRepository librariesRepository;

	@Override
	public Page<Libraries> search(Pageable pageable, LibrariesCriteria criteria) {
		return librariesRepository.findAll(new LibrariesSpecification(criteria), pageable);
	}

	@Override
	public Libraries get(Long libraryId) {
		return librariesRepository.findByLibraryId(libraryId);
	}

	@Override
	public Boolean delete(Long libraryId) {
		if (librariesRepository.findByLibraryId(libraryId) != null) {
			librariesRepository.deleteById(libraryId);
			return true;
		}
		return false;
	}

	@Override
	public Libraries create(Libraries libraries) {
		return librariesRepository.save(libraries);
	}

	@Override
	public Boolean save(Libraries libraries) {
		final Long pk = libraries.getLibraryId();
		if (librariesRepository.findByLibraryId(pk) != null) {
			librariesRepository.save(libraries);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(Libraries libraries) {
		return librariesRepository.existsById(libraries.getLibraryId());
	}

	class LibrariesSpecification implements Specification<Libraries> {

		private LibrariesCriteria criteria;

		public LibrariesSpecification(LibrariesCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<Libraries> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getLibraryName())) {
				predicates.add(builder.like(builder.lower(root.get("libraryName")),
						criteria.getLibraryName().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getLibraryDetails())) {
				predicates.add(builder.like(builder.lower(root.get("libraryDetails")),
						criteria.getLibraryDetails().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

}

/*
 * Created on 2018-10-02 ( Date ISO 2018-10-02 - Time 06:31:38 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.MembersRequest;
import com.example.demo.service.MembersRequestService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/membersrequest", produces = "application/hal+json")
public class MembersRequestController {

	private static final Logger LOGGER = LoggerFactory.getLogger(MembersRequestController.class);

	private static final String NOT_FOUND ="MembersRequest not found";

	@Autowired
	private MembersRequestService membersRequestService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<MembersRequest> findAll() {
		List<MembersRequest> list = membersRequestService.findAll();
		return list;
	}


	@GetMapping("{requestId}")
	public MembersRequest get(@PathVariable("requestId") Integer requestId) {
		final MembersRequest membersRequest = membersRequestService.getOne(requestId);
		LOGGER.info("MembersRequest found : {}", membersRequest);
		return membersRequest;
	}

	@PostMapping(value="/create/",consumes = "application/json")
	public MembersRequest create(@RequestBody MembersRequest membersRequest) {
		LOGGER.info("MembersRequest creation request : {}", membersRequest);
		if (membersRequestService.exist(membersRequest)) {
			LOGGER.info("MembersRequest already exist ! : {}", membersRequest);
			return null;
		} else {
			final MembersRequest created = membersRequestService.create(membersRequest);
			LOGGER.info("Created membersRequest {}", created);
			return created;
		}
	}

	@PutMapping(value="/save/",consumes = "application/json")
	public Boolean update(@RequestBody MembersRequest membersRequest) {
		return membersRequestService.update(membersRequest);
	}

	@DeleteMapping("{requestId}")
	public void delete(@PathVariable("requestId") Integer requestId) {
		LOGGER.info("MembersRequest deletion request : {}", resolveIdForLogger(requestId));
		if (membersRequestService.delete(requestId)) {
			LOGGER.info("MembersRequest succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer requestId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(requestId));
		return ids.toString();
	}

}



/*
 * Created on 2018-10-02 ( Date ISO 2018-10-02 - Time 06:31:38 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.AmazonBook;
import com.example.demo.service.AmazonBookService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/amazonbook", produces = "application/hal+json")
public class AmazonBookController {

	private static final Logger LOGGER = LoggerFactory.getLogger(AmazonBookController.class);

	private static final String NOT_FOUND ="AmazonBook not found";

	@Autowired
	private AmazonBookService amazonBookService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<AmazonBook> findAll() {
		List<AmazonBook> list = amazonBookService.findAll();
		return list;
	}


	@GetMapping("{isbn}")
	public AmazonBook get(@PathVariable("isbn") Integer isbn) {
		final AmazonBook amazonBook = amazonBookService.getOne(isbn);
		LOGGER.info("AmazonBook found : {}", amazonBook);
		return amazonBook;
	}

	@PostMapping(value="/create/",consumes = "application/json")
	public AmazonBook create(@RequestBody AmazonBook amazonBook) {
		LOGGER.info("AmazonBook creation request : {}", amazonBook);
		if (amazonBookService.exist(amazonBook)) {
			LOGGER.info("AmazonBook already exist ! : {}", amazonBook);
			return null;
		} else {
			final AmazonBook created = amazonBookService.create(amazonBook);
			LOGGER.info("Created amazonBook {}", created);
			return created;
		}
	}

	@PutMapping(value="/save/",consumes = "application/json")
	public Boolean update(@RequestBody AmazonBook amazonBook) {
		return amazonBookService.update(amazonBook);
	}

	@DeleteMapping("{isbn}")
	public void delete(@PathVariable("isbn") Integer isbn) {
		LOGGER.info("AmazonBook deletion request : {}", resolveIdForLogger(isbn));
		if (amazonBookService.delete(isbn)) {
			LOGGER.info("AmazonBook succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer isbn) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(isbn));
		return ids.toString();
	}

}



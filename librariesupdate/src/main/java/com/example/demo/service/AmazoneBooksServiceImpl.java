/*
 * Created on 2018-09-28 ( Date ISO 2018-09-28 - Time 09:53:16 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import com.example.demo.entity.AmazoneBooks;
import com.example.demo.repository.AmazoneBooksRepository;
import com.example.demo.service.criteria.AmazoneBooksCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

/**
 * Service implementation for AmazoneBooks.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class AmazoneBooksServiceImpl implements AmazoneBooksService {

	@Autowired
	private AmazoneBooksRepository amazoneBooksRepository;

	@Override
	public Page<AmazoneBooks> search(Pageable pageable, AmazoneBooksCriteria criteria) {
		return amazoneBooksRepository.findAll(new AmazoneBooksSpecification(criteria), pageable);
	}

	@Override
	public AmazoneBooks get(Long isbn) {
		return amazoneBooksRepository.findByIsbn(isbn);
	}

	@Override
	public Boolean delete(Long isbn) {
		if (amazoneBooksRepository.findByIsbn(isbn) != null) {
			amazoneBooksRepository.deleteById(isbn);
			return true;
		}
		return false;
	}

	@Override
	public AmazoneBooks create(AmazoneBooks amazoneBooks) {
		return amazoneBooksRepository.save(amazoneBooks);
	}

	@Override
	public Boolean save(AmazoneBooks amazoneBooks) {
		final Long pk = amazoneBooks.getIsbn();
		if (amazoneBooksRepository.findByIsbn(pk) != null) {
			amazoneBooksRepository.save(amazoneBooks);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(AmazoneBooks amazoneBooks) {
		return amazoneBooksRepository.existsById(amazoneBooks.getIsbn());
	}

	class AmazoneBooksSpecification implements Specification<AmazoneBooks> {

		private AmazoneBooksCriteria criteria;

		public AmazoneBooksSpecification(AmazoneBooksCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<AmazoneBooks> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getTitle())) {
				predicates.add(builder.like(builder.lower(root.get("title")),
						criteria.getTitle().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getAuthors())) {
				predicates.add(builder.like(builder.lower(root.get("authors")),
						criteria.getAuthors().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getAmazonStartRating())) {
				predicates.add(builder.like(builder.lower(root.get("amazonStartRating")),
						criteria.getAmazonStartRating().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getLishPrice())) {
				predicates.add(builder.like(builder.lower(root.get("lishPrice")),
						criteria.getLishPrice().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getYourSaving())) {
				predicates.add(builder.like(builder.lower(root.get("yourSaving")),
						criteria.getYourSaving().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

	@Override
	public List<AmazoneBooks> findAll() {
		// TODO Auto-generated method stub
		return amazoneBooksRepository.findAll();
	}

}

/*
 * Created on 2018-09-28 ( Date ISO 2018-09-28 - Time 09:53:16 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import com.example.demo.entity.Addresses;
import com.example.demo.repository.AddressesRepository;
import com.example.demo.service.criteria.AddressesCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

/**
 * Service implementation for Addresses.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class AddressesServiceImpl implements AddressesService {

	@Autowired
	private AddressesRepository addressesRepository;

	@Override
	public Page<Addresses> search(Pageable pageable, AddressesCriteria criteria) {
		return addressesRepository.findAll(new AddressesSpecification(criteria), pageable);
	}

	@Override
	public Addresses get(Long addressId) {
		return addressesRepository.findByAddressId(addressId);
	}

	@Override
	public Boolean delete(Long addressId) {
		if (addressesRepository.findByAddressId(addressId) != null) {
			addressesRepository.deleteById(addressId);
			return true;
		}
		return false;
	}

	@Override
	public Addresses create(Addresses addresses) {
		return addressesRepository.save(addresses);
	}

	@Override
	public Boolean save(Addresses addresses) {
		final Long pk = addresses.getAddressId();
		if (addressesRepository.findByAddressId(pk) != null) {
			addressesRepository.save(addresses);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(Addresses addresses) {
		return addressesRepository.existsById(addresses.getAddressId());
	}

	class AddressesSpecification implements Specification<Addresses> {

		private AddressesCriteria criteria;

		public AddressesSpecification(AddressesCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<Addresses> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getLine1NumberBuilding())) {
				predicates.add(builder.like(builder.lower(root.get("line1NumberBuilding")),
						criteria.getLine1NumberBuilding().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getLine2NumberStreet())) {
				predicates.add(builder.like(builder.lower(root.get("line2NumberStreet")),
						criteria.getLine2NumberStreet().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getLine3areaLocality())) {
				predicates.add(builder.like(builder.lower(root.get("line3areaLocality")),
						criteria.getLine3areaLocality().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getCity())) {
				predicates.add(builder.like(builder.lower(root.get("city")),
						criteria.getCity().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getZipPostcode())) {
				predicates.add(builder.like(builder.lower(root.get("zipPostcode")),
						criteria.getZipPostcode().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getStateProvicenCounty())) {
				predicates.add(builder.like(builder.lower(root.get("stateProvicenCounty")),
						criteria.getStateProvicenCounty().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getCountry())) {
				predicates.add(builder.like(builder.lower(root.get("country")),
						criteria.getCountry().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getOtherAddressDetails())) {
				predicates.add(builder.like(builder.lower(root.get("otherAddressDetails")),
						criteria.getOtherAddressDetails().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

	@Override
	public List<Addresses> getAll() {
		// TODO Auto-generated method stub
		return addressesRepository.findAll();
	}

}

/*
 * Created on 2018-09-28 ( Date ISO 2018-09-28 - Time 09:53:16 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import com.example.demo.entity.Books;
import com.example.demo.repository.BooksRepository;
import com.example.demo.service.criteria.BooksCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

/**
 * Service implementation for Books.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class BooksServiceImpl implements BooksService {

	@Autowired
	private BooksRepository booksRepository;

	@Override
	public Page<Books> search(Pageable pageable, BooksCriteria criteria) {
		return booksRepository.findAll(new BooksSpecification(criteria), pageable);
	}

	@Override
	public Books get(Long isbn) {
		return booksRepository.findByIsbn(isbn);
	}

	@Override
	public Boolean delete(Long isbn) {
		if (booksRepository.findByIsbn(isbn) != null) {
			booksRepository.deleteById(isbn);
			return true;
		}
		return false;
	}

	@Override
	public Books create(Books books) {
		return booksRepository.save(books);
	}

	@Override
	public Boolean save(Books books) {
		final Long pk = books.getIsbn();
		if (booksRepository.findByIsbn(pk) != null) {
			booksRepository.save(books);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(Books books) {
		return booksRepository.existsById(books.getIsbn());
	}

	class BooksSpecification implements Specification<Books> {

		private BooksCriteria criteria;

		public BooksSpecification(BooksCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<Books> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getBookTitle())) {
				predicates.add(builder.like(builder.lower(root.get("bookTitle")),
						criteria.getBookTitle().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

	@Override
	public List<Books> findAll() {
		// TODO Auto-generated method stub
		return booksRepository.findAll();
	}

}

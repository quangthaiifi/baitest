/*
 * Created on 2018-09-29 ( Date ISO 2018-09-29 - Time 18:43:47 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.Books;
import com.example.demo.service.BooksServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/books", produces = "application/hal+json")
public class BooksController {

	private static final Logger LOGGER = LoggerFactory.getLogger(BooksController.class);

	private static final String NOT_FOUND ="Books not found";

	@Autowired
	private BooksServiceImpl booksService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Books> findAll() {
		List<Books> list = booksService.getAll();
		return list;
	}


	@GetMapping("{isbn}")
	public Books get(@PathVariable("isbn") Long isbn) {
		final Books books = booksService.get(isbn);
		LOGGER.info("Books found : {}", books);
		return books;
	}

	@PostMapping(consumes = "application/json")
	public Books create(@RequestBody Books books) {
		LOGGER.info("Books creation request : {}", books);
		if (booksService.exist(books)) {
			LOGGER.info("Books already exist ! : {}", books);
			return null;
		} else {
			final Books created = booksService.create(books);
			LOGGER.info("Created books {}", created);
			return created;
		}
	}

	@PutMapping(value = "{isbn}", consumes = "application/json")
	public Boolean update(@PathVariable("isbn") Long isbn, @RequestBody Books books) {
		return booksService.save(books);
	}

	@DeleteMapping("{isbn}")
	public void delete(@PathVariable("isbn") Long isbn) {
		LOGGER.info("Books deletion request : {}", resolveIdForLogger(isbn));
		if (booksService.delete(isbn)) {
			LOGGER.info("Books succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Long isbn) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(isbn));
		return ids.toString();
	}

}


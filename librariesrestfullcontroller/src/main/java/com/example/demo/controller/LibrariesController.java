/*
 * Created on 2018-09-29 ( Date ISO 2018-09-29 - Time 18:43:47 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.Libraries;
import com.example.demo.service.LibrariesServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/libraries", produces = "application/hal+json")
public class LibrariesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(LibrariesController.class);

	private static final String NOT_FOUND ="Libraries not found";

	@Autowired
	private LibrariesService librariesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Libraries> findAll() {
		List<Libraries> list = librariesService.getAll();
		return list;
	}


	@GetMapping("{libraryId}")
	public Libraries get(@PathVariable("libraryId") Long libraryId) {
		final Libraries libraries = librariesService.get(libraryId);
		LOGGER.info("Libraries found : {}", libraries);
		return libraries;
	}

	@PostMapping(value="/create/",consumes = "application/json")
	public Libraries create(@RequestBody Libraries libraries) {
		LOGGER.info("Libraries creation request : {}", libraries);
		if (librariesService.exist(libraries)) {
			LOGGER.info("Libraries already exist ! : {}", libraries);
			return null;
		} else {
			final Libraries created = librariesService.create(libraries);
			LOGGER.info("Created libraries {}", created);
			return created;
		}
	}

	@PutMapping(value = "/save/", consumes = "application/json")
	public Boolean update(@PathVariable("libraryId") Long libraryId, @RequestBody Libraries libraries) {
		return librariesService.save(libraries);
	}

	@DeleteMapping("{libraryId}")
	public void delete(@PathVariable("libraryId") Long libraryId) {
		LOGGER.info("Libraries deletion request : {}", resolveIdForLogger(libraryId));
		if (librariesService.delete(libraryId)) {
			LOGGER.info("Libraries succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Long libraryId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(libraryId));
		return ids.toString();
	}

}


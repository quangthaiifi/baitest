/*
 * Created on 2018-09-29 ( Date ISO 2018-09-29 - Time 18:43:47 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.Authors;
import com.example.demo.service.AuthorsServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/authors", produces = "application/hal+json")
public class AuthorsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(AuthorsController.class);

	private static final String NOT_FOUND ="Authors not found";

	@Autowired
	private AuthorsService authorsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Authors> findAll() {
		List<Authors> list = authorsService.getAll();
		return list;
	}


	@GetMapping("{authorId}")
	public Authors get(@PathVariable("authorId") Long authorId) {
		final Authors authors = authorsService.get(authorId);
		LOGGER.info("Authors found : {}", authors);
		return authors;
	}

	@PostMapping(value="/create/",consumes = "application/json")
	public Authors create(@RequestBody Authors authors) {
		System.out.println(authors);
		LOGGER.info("Authors creation request : {}", authors);
		if (authorsService.exist(authors)) {
			LOGGER.info("Authors already exist ! : {}", authors);
			return null;
		} else {
			final Authors created = authorsService.create(authors);
			LOGGER.info("Created authors {}", created);
			return created;
		}
	}

	@PutMapping(value = "/save/", consumes = "application/json")
	public Boolean update(@RequestBody Authors authors) {
		return authorsService.save(authors);
	}

	@DeleteMapping("{authorId}")
	public void delete(@PathVariable("authorId") Long authorId) {
		LOGGER.info("Authors deletion request : {}", resolveIdForLogger(authorId));
		if (authorsService.delete(authorId)) {
			LOGGER.info("Authors succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Long authorId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(authorId));
		return ids.toString();
	}

}


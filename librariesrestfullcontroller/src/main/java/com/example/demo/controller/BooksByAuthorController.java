/*
 * Created on 2018-09-29 ( Date ISO 2018-09-29 - Time 18:43:47 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.BooksByAuthor;
import com.example.demo.service.BooksByAuthorServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/booksByAuthor", produces = "application/hal+json")
public class BooksByAuthorController {

	private static final Logger LOGGER = LoggerFactory.getLogger(BooksByAuthorController.class);

	private static final String NOT_FOUND ="BooksByAuthor not found";

	@Autowired
	private BooksByAuthorService booksByAuthorService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<BooksByAuthor> findAll() {
		List<BooksByAuthor> list = booksByAuthorService.getAll();
		return list;
	}


	@GetMapping("{booksHasAuthorsid}")
	public BooksByAuthor get(@PathVariable("booksHasAuthorsid") Long booksHasAuthorsid) {
		final BooksByAuthor booksByAuthor = booksByAuthorService.get(booksHasAuthorsid);
		LOGGER.info("BooksByAuthor found : {}", booksByAuthor);
		return booksByAuthor;
	}

	@PostMapping(value="/create/",consumes = "application/json")
	public BooksByAuthor create(@RequestBody BooksByAuthor booksByAuthor) {
		LOGGER.info("BooksByAuthor creation request : {}", booksByAuthor);
		if (booksByAuthorService.exist(booksByAuthor)) {
			LOGGER.info("BooksByAuthor already exist ! : {}", booksByAuthor);
			return null;
		} else {
			final BooksByAuthor created = booksByAuthorService.create(booksByAuthor);
			LOGGER.info("Created booksByAuthor {}", created);
			return created;
		}
	}

	@PutMapping(value = "/save/", consumes = "application/json")
	public Boolean update(@RequestBody BooksByAuthor booksByAuthor) {
		return booksByAuthorService.save(booksByAuthor);
	}

	@DeleteMapping("{booksHasAuthorsid}")
	public void delete(@PathVariable("booksHasAuthorsid") Long booksHasAuthorsid) {
		LOGGER.info("BooksByAuthor deletion request : {}", resolveIdForLogger(booksHasAuthorsid));
		if (booksByAuthorService.delete(booksHasAuthorsid)) {
			LOGGER.info("BooksByAuthor succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Long booksHasAuthorsid) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(booksHasAuthorsid));
		return ids.toString();
	}

}

